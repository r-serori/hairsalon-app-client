"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/requestApi.ts":
/*!********************************!*\
  !*** ./services/requestApi.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCsrfToken: function() { return /* binding */ getCsrfToken; },\n/* harmony export */   sendRequest: function() { return /* binding */ sendRequest; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"../node_modules/axios/index.js\");\n\n// Axiosインスタンスの設定\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"http://localhost:8000\",\n    withCredentials: true\n});\n// CSRFトークンの取得\nconst getCsrfToken = async ()=>{\n    try {\n        await apiClient.get(\"/sanctum/csrf-cookie\");\n        const csrfToken = document.cookie.replace(/(?:(?:^|.*;\\s*)XSRF-TOKEN\\s*=\\s*([^;]*).*$)|^.*$/, \"$1\");\n        apiClient.defaults.headers.common[\"X-XSRF-TOKEN\"] = csrfToken;\n        console.log(\"CSRFトークン取得成功:\", csrfToken);\n        return csrfToken;\n    } catch (error) {\n        console.error(\"CSRFトークンの取得に失敗しました:\", error);\n        throw new Error(\"CSRFトークンの取得に失敗しました\");\n    }\n};\n// リクエストの送信\nconst sendRequest = async (method, url, data)=>{\n    console.log(\"送信するデータ:\", data);\n    try {\n        const response = await apiClient.request({\n            method,\n            url,\n            data\n        });\n        console.log(\"\".concat(method, \" request to \").concat(url, \" successful:\"));\n        console.log(\"RESPONSE\", response);\n        return response;\n    } catch (error) {\n        var _error_response;\n        // ここでCSRFトークンの再取得を試みる\n        if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 419) {\n            console.error(\"CSRFトークンのエラーが発生しました。再取得を試みます。\");\n            try {\n                await getCsrfToken(); // CSRFトークンを再取得\n                const retryResponse = await apiClient.request({\n                    method,\n                    url,\n                    data\n                });\n                console.log(\"\".concat(method, \" request to \").concat(url, \" successful on retry:\"));\n                console.log(\"RESPONSE\", retryResponse);\n                return retryResponse;\n            } catch (retryError) {\n                console.error(\"Failed to send request on retry:\", retryError);\n                return retryError.response;\n            }\n        } else {\n            console.error(\"Failed to send request:\", error);\n            return error.response;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zZXJ2aWNlcy9yZXF1ZXN0QXBpLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUV6RCxpQkFBaUI7QUFDakIsTUFBTUMsWUFBWUQsb0RBQVksQ0FBQztJQUM3QkcsU0FBUztJQUNUQyxpQkFBaUI7QUFDbkI7QUFFQSxjQUFjO0FBQ1AsTUFBTUMsZUFBZTtJQUMxQixJQUFJO1FBQ0YsTUFBTUosVUFBVUssR0FBRyxDQUFDO1FBQ3BCLE1BQU1DLFlBQVlDLFNBQVNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUN2QyxvREFDQTtRQUVGVCxVQUFVVSxRQUFRLENBQUNDLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLGVBQWUsR0FBR047UUFDcERPLFFBQVFDLEdBQUcsQ0FBQyxpQkFBaUJSO1FBQzdCLE9BQU9BO0lBQ1QsRUFBRSxPQUFPUyxPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyx1QkFBdUJBO1FBQ3JDLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtBQUNGLEVBQUU7QUFFRixXQUFXO0FBQ0osTUFBTUMsY0FBYyxPQUN6QkMsUUFDQUMsS0FDQUM7SUFFQVAsUUFBUUMsR0FBRyxDQUFDLFlBQVlNO0lBQ3hCLElBQUk7UUFDRixNQUFNQyxXQUFXLE1BQU1yQixVQUFVc0IsT0FBTyxDQUFDO1lBQ3ZDSjtZQUNBQztZQUNBQztRQUNGO1FBRUFQLFFBQVFDLEdBQUcsQ0FBQyxHQUF3QkssT0FBckJELFFBQU8sZ0JBQWtCLE9BQUpDLEtBQUk7UUFDeENOLFFBQVFDLEdBQUcsQ0FBQyxZQUFZTztRQUN4QixPQUFPQTtJQUNULEVBQUUsT0FBT04sT0FBTztZQUVWQTtRQURKLHNCQUFzQjtRQUN0QixJQUFJQSxFQUFBQSxrQkFBQUEsTUFBTU0sUUFBUSxjQUFkTixzQ0FBQUEsZ0JBQWdCUSxNQUFNLE1BQUssS0FBSztZQUNsQ1YsUUFBUUUsS0FBSyxDQUFDO1lBRWQsSUFBSTtnQkFDRixNQUFNWCxnQkFBZ0IsZUFBZTtnQkFDckMsTUFBTW9CLGdCQUFnQixNQUFNeEIsVUFBVXNCLE9BQU8sQ0FBQztvQkFDNUNKO29CQUNBQztvQkFDQUM7Z0JBQ0Y7Z0JBRUFQLFFBQVFDLEdBQUcsQ0FBQyxHQUF3QkssT0FBckJELFFBQU8sZ0JBQWtCLE9BQUpDLEtBQUk7Z0JBQ3hDTixRQUFRQyxHQUFHLENBQUMsWUFBWVU7Z0JBQ3hCLE9BQU9BO1lBQ1QsRUFBRSxPQUFPQyxZQUFZO2dCQUNuQlosUUFBUUUsS0FBSyxDQUFDLG9DQUFvQ1U7Z0JBQ2xELE9BQU9BLFdBQVdKLFFBQVE7WUFDNUI7UUFDRixPQUFPO1lBQ0xSLFFBQVFFLEtBQUssQ0FBQywyQkFBMkJBO1lBQ3pDLE9BQU9BLE1BQU1NLFFBQVE7UUFDdkI7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc2VydmljZXMvcmVxdWVzdEFwaS50cz9hOTFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcywgeyBBeGlvc0Vycm9yLCBBeGlvc1Jlc3BvbnNlIH0gZnJvbSBcImF4aW9zXCI7XG5cbi8vIEF4aW9z44Kk44Oz44K544K/44Oz44K544Gu6Kit5a6aXG5jb25zdCBhcGlDbGllbnQgPSBheGlvcy5jcmVhdGUoe1xuICBiYXNlVVJMOiBcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMFwiLFxuICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsIC8vIENvb2tpZeOCkuS9v+eUqOOBmeOCi+OBn+OCgeOBruioreWumuOCkuacieWKueOBq+OBmeOCi1xufSk7XG5cbi8vIENTUkbjg4jjg7zjgq/jg7Pjga7lj5blvpdcbmV4cG9ydCBjb25zdCBnZXRDc3JmVG9rZW4gPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgYXBpQ2xpZW50LmdldChcIi9zYW5jdHVtL2NzcmYtY29va2llXCIpO1xuICAgIGNvbnN0IGNzcmZUb2tlbiA9IGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKFxuICAgICAgLyg/Oig/Ol58Lio7XFxzKilYU1JGLVRPS0VOXFxzKj1cXHMqKFteO10qKS4qJCl8Xi4qJC8sXG4gICAgICBcIiQxXCJcbiAgICApO1xuICAgIGFwaUNsaWVudC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtWFNSRi1UT0tFTlwiXSA9IGNzcmZUb2tlbjtcbiAgICBjb25zb2xlLmxvZyhcIkNTUkbjg4jjg7zjgq/jg7Plj5blvpfmiJDlip86XCIsIGNzcmZUb2tlbik7XG4gICAgcmV0dXJuIGNzcmZUb2tlbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiQ1NSRuODiOODvOOCr+ODs+OBruWPluW+l+OBq+WkseaVl+OBl+OBvuOBl+OBnzpcIiwgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNTUkbjg4jjg7zjgq/jg7Pjga7lj5blvpfjgavlpLHmlZfjgZfjgb7jgZfjgZ9cIik7XG4gIH1cbn07XG5cbi8vIOODquOCr+OCqOOCueODiOOBrumAgeS/oVxuZXhwb3J0IGNvbnN0IHNlbmRSZXF1ZXN0ID0gYXN5bmMgKFxuICBtZXRob2Q6IFwiR0VUXCIgfCBcIlBPU1RcIiB8IFwiT1BUSU9OU1wiLFxuICB1cmw6IHN0cmluZyxcbiAgZGF0YT86IGFueVxuKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgY29uc29sZS5sb2coXCLpgIHkv6HjgZnjgovjg4fjg7zjgr86XCIsIGRhdGEpO1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YSxcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKGAke21ldGhvZH0gcmVxdWVzdCB0byAke3VybH0gc3VjY2Vzc2Z1bDpgKTtcbiAgICBjb25zb2xlLmxvZyhcIlJFU1BPTlNFXCIsIHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8g44GT44GT44GnQ1NSRuODiOODvOOCr+ODs+OBruWGjeWPluW+l+OCkuippuOBv+OCi1xuICAgIGlmIChlcnJvci5yZXNwb25zZT8uc3RhdHVzID09PSA0MTkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDU1JG44OI44O844Kv44Oz44Gu44Ko44Op44O844GM55m655Sf44GX44G+44GX44Gf44CC5YaN5Y+W5b6X44KS6Kmm44G/44G+44GZ44CCXCIpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBnZXRDc3JmVG9rZW4oKTsgLy8gQ1NSRuODiOODvOOCr+ODs+OCkuWGjeWPluW+l1xuICAgICAgICBjb25zdCByZXRyeVJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coYCR7bWV0aG9kfSByZXF1ZXN0IHRvICR7dXJsfSBzdWNjZXNzZnVsIG9uIHJldHJ5OmApO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJFU1BPTlNFXCIsIHJldHJ5UmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gcmV0cnlSZXNwb25zZTtcbiAgICAgIH0gY2F0Y2ggKHJldHJ5RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBzZW5kIHJlcXVlc3Qgb24gcmV0cnk6XCIsIHJldHJ5RXJyb3IpO1xuICAgICAgICByZXR1cm4gcmV0cnlFcnJvci5yZXNwb25zZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBzZW5kIHJlcXVlc3Q6XCIsIGVycm9yKTtcbiAgICAgIHJldHVybiBlcnJvci5yZXNwb25zZTtcbiAgICB9XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJhcGlDbGllbnQiLCJjcmVhdGUiLCJiYXNlVVJMIiwid2l0aENyZWRlbnRpYWxzIiwiZ2V0Q3NyZlRva2VuIiwiZ2V0IiwiY3NyZlRva2VuIiwiZG9jdW1lbnQiLCJjb29raWUiLCJyZXBsYWNlIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiRXJyb3IiLCJzZW5kUmVxdWVzdCIsIm1ldGhvZCIsInVybCIsImRhdGEiLCJyZXNwb25zZSIsInJlcXVlc3QiLCJzdGF0dXMiLCJyZXRyeVJlc3BvbnNlIiwicmV0cnlFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./services/requestApi.ts\n"));

/***/ })

});