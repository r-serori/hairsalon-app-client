"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/requestApi.ts":
/*!********************************!*\
  !*** ./services/requestApi.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCsrfToken: function() { return /* binding */ getCsrfToken; },\n/* harmony export */   sendRequest: function() { return /* binding */ sendRequest; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"../node_modules/axios/index.js\");\n\n// Axiosインスタンスの設定\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"http://localhost:8000\",\n    withCredentials: true\n});\n// // CSRFトークンの取得\nconst getCsrfToken = async ()=>{\n    try {\n        await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/sanctum/csrf-cookie\");\n        // CSRFトークンを取得\n        const csrfToken = document.cookie.replace(/(?:(?:^|.*;\\s*)XSRF-TOKEN\\s*=\\s*([^;]*).*$)|^.*$/, \"$1\");\n        axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].defaults.headers.common[\"X-XSRF-TOKEN\"] = csrfToken;\n        console.log(\"CSRFトークン取得成功:\", csrfToken);\n        return csrfToken;\n    } catch (error) {\n        console.error(\"CSRFトークンの取得に失敗しました:\", error);\n        throw new Error(\"CSRFトークンの取得に失敗しました\");\n    }\n};\nconst sendRequest = async (method, url, data)=>{\n    console.log(\"送信するデータ:\", data);\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n            method,\n            url,\n            data\n        });\n        console.log(\"\".concat(method, \" request to \").concat(url, \" successful:\"));\n        console.log(\"RESPONSE\", response);\n        return response;\n    } catch (error) {\n        console.error(\"Failed to send request:\", error);\n        return error.response;\n    }\n// ここでCSRFトークンの再取得を試みる\n//   if (error.response?.status === 419) {\n//     console.error(\"CSRFトークンのエラーが発生しました。再取得を試みます。\");\n//     try {\n//       await axios.get(\"api/sanctum/csrf-cookie\"); // CSRFトークンを再取得\n//       const retryResponse = await axios.request({\n//         method,\n//         url,\n//         data,\n//       });\n//       console.log(`${method} request to ${url} successful on retry:`);\n//       console.log(\"RESPONSE\", retryResponse);\n//       return retryResponse;\n//     } catch (retryError) {\n//       console.error(\"Failed to send request on retry:\", retryError);\n//       return retryError.response;\n//     }\n//   } else {\n//     console.error(\"Failed to send request:\", error);\n//     return error.response;\n//   }\n// }\n}; // import axios from \"axios\";\n // const BASE_URL = \"http://localhost:8000\";\n // axios.defaults.baseURL = BASE_URL;\n // axios.defaults.withCredentials = true;\n // // CSRFトークンの取得\n // export const getCsrfToken = async () => {\n //   try {\n //     await axios.get(\"/sanctum/csrf-cookie\");\n //     // CSRFトークンを取得\n //     const csrfToken = document.cookie.replace(\n //       /(?:(?:^|.*;\\s*)XSRF-TOKEN\\s*=\\s*([^;]*).*$)|^.*$/,\n //       \"$1\"\n //     );\n //     axios.defaults.headers.common[\"X-XSRF-TOKEN\"] = csrfToken;\n //     return csrfToken;\n //   } catch (error) {\n //     console.error(\"CSRFトークンの取得に失敗しました:\", error);\n //     throw new Error(\"CSRFトークンの取得に失敗しました\");\n //   }\n // };\n // // リクエストの送信\n // export const sendRequest = async (method, url, data) => {\n //   try {\n //     const response = await axios.request({\n //       method,\n //       url,\n //       data,\n //     });\n //     console.log(`${method} request to ${url} successful:`);\n //     console.log(\"RESPONSE\", response);\n //     return response;\n //   } catch (error) {\n //     console.error(\"Failed to send request:\", error);\n //     return error.response;\n //   }\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zZXJ2aWNlcy9yZXF1ZXN0QXBpLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUV6RCxpQkFBaUI7QUFDakIsTUFBTUMsWUFBWUQsb0RBQVksQ0FBQztJQUM3QkcsU0FBUztJQUNUQyxpQkFBaUI7QUFDbkI7QUFFQSxpQkFBaUI7QUFDVixNQUFNQyxlQUFlO0lBQzFCLElBQUk7UUFDRixNQUFNTCxpREFBUyxDQUFDO1FBQ2hCLGNBQWM7UUFDZCxNQUFNTyxZQUFZQyxTQUFTQyxNQUFNLENBQUNDLE9BQU8sQ0FDdkMsb0RBQ0E7UUFFRlYsc0RBQWMsQ0FBQ1ksT0FBTyxDQUFDQyxNQUFNLENBQUMsZUFBZSxHQUFHTjtRQUNoRE8sUUFBUUMsR0FBRyxDQUFDLGlCQUFpQlI7UUFDN0IsT0FBT0E7SUFDVCxFQUFFLE9BQU9TLE9BQU87UUFDZEYsUUFBUUUsS0FBSyxDQUFDLHVCQUF1QkE7UUFDckMsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0FBQ0YsRUFBRTtBQUVLLE1BQU1DLGNBQWMsT0FDekJDLFFBQ0FDLEtBQ0FDO0lBRUFQLFFBQVFDLEdBQUcsQ0FBQyxZQUFZTTtJQUN4QixJQUFJO1FBQ0YsTUFBTUMsV0FBVyxNQUFNdEIsb0RBQVksQ0FBQztZQUNsQ21CO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFFQVAsUUFBUUMsR0FBRyxDQUFDLEdBQXdCSyxPQUFyQkQsUUFBTyxnQkFBa0IsT0FBSkMsS0FBSTtRQUN4Q04sUUFBUUMsR0FBRyxDQUFDLFlBQVlPO1FBQ3hCLE9BQU9BO0lBQ1QsRUFBRSxPQUFPTixPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQywyQkFBMkJBO1FBQ3pDLE9BQU9BLE1BQU1NLFFBQVE7SUFDdkI7QUFFQSxzQkFBc0I7QUFDdEIsMENBQTBDO0FBQzFDLHNEQUFzRDtBQUV0RCxZQUFZO0FBQ1osb0VBQW9FO0FBQ3BFLG9EQUFvRDtBQUNwRCxrQkFBa0I7QUFDbEIsZUFBZTtBQUNmLGdCQUFnQjtBQUNoQixZQUFZO0FBRVoseUVBQXlFO0FBQ3pFLGdEQUFnRDtBQUNoRCw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCLHVFQUF1RTtBQUN2RSxvQ0FBb0M7QUFDcEMsUUFBUTtBQUNSLGFBQWE7QUFDYix1REFBdUQ7QUFDdkQsNkJBQTZCO0FBQzdCLE1BQU07QUFDTixJQUFJO0FBQ04sRUFBRSxDQUVGLDZCQUE2QjtDQUU3Qiw0Q0FBNEM7Q0FDNUMscUNBQXFDO0NBQ3JDLHlDQUF5QztDQUV6QyxpQkFBaUI7Q0FDakIsNENBQTRDO0NBQzVDLFVBQVU7Q0FDViwrQ0FBK0M7Q0FDL0MscUJBQXFCO0NBQ3JCLGlEQUFpRDtDQUNqRCw0REFBNEQ7Q0FDNUQsYUFBYTtDQUNiLFNBQVM7Q0FDVCxpRUFBaUU7Q0FDakUsd0JBQXdCO0NBQ3hCLHNCQUFzQjtDQUN0QixtREFBbUQ7Q0FDbkQsNkNBQTZDO0NBQzdDLE1BQU07Q0FDTixLQUFLO0NBRUwsY0FBYztDQUNkLDREQUE0RDtDQUM1RCxVQUFVO0NBQ1YsNkNBQTZDO0NBQzdDLGdCQUFnQjtDQUNoQixhQUFhO0NBQ2IsY0FBYztDQUNkLFVBQVU7Q0FDViw4REFBOEQ7Q0FDOUQseUNBQXlDO0NBQ3pDLHVCQUF1QjtDQUN2QixzQkFBc0I7Q0FDdEIsdURBQXVEO0NBQ3ZELDZCQUE2QjtDQUM3QixNQUFNO0NBQ04sS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zZXJ2aWNlcy9yZXF1ZXN0QXBpLnRzP2E5MWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7IEF4aW9zRXJyb3IsIEF4aW9zUmVzcG9uc2UgfSBmcm9tIFwiYXhpb3NcIjtcblxuLy8gQXhpb3PjgqTjg7Pjgrnjgr/jg7Pjgrnjga7oqK3lrppcbmNvbnN0IGFwaUNsaWVudCA9IGF4aW9zLmNyZWF0ZSh7XG4gIGJhc2VVUkw6IFwiaHR0cDovL2xvY2FsaG9zdDo4MDAwXCIsXG4gIHdpdGhDcmVkZW50aWFsczogdHJ1ZSwgLy8gQ29va2ll44KS5L2/55So44GZ44KL44Gf44KB44Gu6Kit5a6a44KS5pyJ5Yq544Gr44GZ44KLXG59KTtcblxuLy8gLy8gQ1NSRuODiOODvOOCr+ODs+OBruWPluW+l1xuZXhwb3J0IGNvbnN0IGdldENzcmZUb2tlbiA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBheGlvcy5nZXQoXCIvc2FuY3R1bS9jc3JmLWNvb2tpZVwiKTtcbiAgICAvLyBDU1JG44OI44O844Kv44Oz44KS5Y+W5b6XXG4gICAgY29uc3QgY3NyZlRva2VuID0gZG9jdW1lbnQuY29va2llLnJlcGxhY2UoXG4gICAgICAvKD86KD86XnwuKjtcXHMqKVhTUkYtVE9LRU5cXHMqPVxccyooW147XSopLiokKXxeLiokLyxcbiAgICAgIFwiJDFcIlxuICAgICk7XG4gICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJYLVhTUkYtVE9LRU5cIl0gPSBjc3JmVG9rZW47XG4gICAgY29uc29sZS5sb2coXCJDU1JG44OI44O844Kv44Oz5Y+W5b6X5oiQ5YqfOlwiLCBjc3JmVG9rZW4pO1xuICAgIHJldHVybiBjc3JmVG9rZW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkNTUkbjg4jjg7zjgq/jg7Pjga7lj5blvpfjgavlpLHmlZfjgZfjgb7jgZfjgZ86XCIsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDU1JG44OI44O844Kv44Oz44Gu5Y+W5b6X44Gr5aSx5pWX44GX44G+44GX44GfXCIpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3Qgc2VuZFJlcXVlc3QgPSBhc3luYyAoXG4gIG1ldGhvZDogXCJHRVRcIiB8IFwiUE9TVFwiIHwgXCJPUFRJT05TXCIsXG4gIHVybDogc3RyaW5nLFxuICBkYXRhPzogYW55XG4pOiBQcm9taXNlPGFueT4gPT4ge1xuICBjb25zb2xlLmxvZyhcIumAgeS/oeOBmeOCi+ODh+ODvOOCvzpcIiwgZGF0YSk7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5jcmVhdGUoe1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YSxcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKGAke21ldGhvZH0gcmVxdWVzdCB0byAke3VybH0gc3VjY2Vzc2Z1bDpgKTtcbiAgICBjb25zb2xlLmxvZyhcIlJFU1BPTlNFXCIsIHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBzZW5kIHJlcXVlc3Q6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gZXJyb3IucmVzcG9uc2U7XG4gIH1cblxuICAvLyDjgZPjgZPjgadDU1JG44OI44O844Kv44Oz44Gu5YaN5Y+W5b6X44KS6Kmm44G/44KLXG4gIC8vICAgaWYgKGVycm9yLnJlc3BvbnNlPy5zdGF0dXMgPT09IDQxOSkge1xuICAvLyAgICAgY29uc29sZS5lcnJvcihcIkNTUkbjg4jjg7zjgq/jg7Pjga7jgqjjg6njg7zjgYznmbrnlJ/jgZfjgb7jgZfjgZ/jgILlho3lj5blvpfjgpLoqabjgb/jgb7jgZnjgIJcIik7XG5cbiAgLy8gICAgIHRyeSB7XG4gIC8vICAgICAgIGF3YWl0IGF4aW9zLmdldChcImFwaS9zYW5jdHVtL2NzcmYtY29va2llXCIpOyAvLyBDU1JG44OI44O844Kv44Oz44KS5YaN5Y+W5b6XXG4gIC8vICAgICAgIGNvbnN0IHJldHJ5UmVzcG9uc2UgPSBhd2FpdCBheGlvcy5yZXF1ZXN0KHtcbiAgLy8gICAgICAgICBtZXRob2QsXG4gIC8vICAgICAgICAgdXJsLFxuICAvLyAgICAgICAgIGRhdGEsXG4gIC8vICAgICAgIH0pO1xuXG4gIC8vICAgICAgIGNvbnNvbGUubG9nKGAke21ldGhvZH0gcmVxdWVzdCB0byAke3VybH0gc3VjY2Vzc2Z1bCBvbiByZXRyeTpgKTtcbiAgLy8gICAgICAgY29uc29sZS5sb2coXCJSRVNQT05TRVwiLCByZXRyeVJlc3BvbnNlKTtcbiAgLy8gICAgICAgcmV0dXJuIHJldHJ5UmVzcG9uc2U7XG4gIC8vICAgICB9IGNhdGNoIChyZXRyeUVycm9yKSB7XG4gIC8vICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc2VuZCByZXF1ZXN0IG9uIHJldHJ5OlwiLCByZXRyeUVycm9yKTtcbiAgLy8gICAgICAgcmV0dXJuIHJldHJ5RXJyb3IucmVzcG9uc2U7XG4gIC8vICAgICB9XG4gIC8vICAgfSBlbHNlIHtcbiAgLy8gICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc2VuZCByZXF1ZXN0OlwiLCBlcnJvcik7XG4gIC8vICAgICByZXR1cm4gZXJyb3IucmVzcG9uc2U7XG4gIC8vICAgfVxuICAvLyB9XG59O1xuXG4vLyBpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbi8vIGNvbnN0IEJBU0VfVVJMID0gXCJodHRwOi8vbG9jYWxob3N0OjgwMDBcIjtcbi8vIGF4aW9zLmRlZmF1bHRzLmJhc2VVUkwgPSBCQVNFX1VSTDtcbi8vIGF4aW9zLmRlZmF1bHRzLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG5cbi8vIC8vIENTUkbjg4jjg7zjgq/jg7Pjga7lj5blvpdcbi8vIGV4cG9ydCBjb25zdCBnZXRDc3JmVG9rZW4gPSBhc3luYyAoKSA9PiB7XG4vLyAgIHRyeSB7XG4vLyAgICAgYXdhaXQgYXhpb3MuZ2V0KFwiL3NhbmN0dW0vY3NyZi1jb29raWVcIik7XG4vLyAgICAgLy8gQ1NSRuODiOODvOOCr+ODs+OCkuWPluW+l1xuLy8gICAgIGNvbnN0IGNzcmZUb2tlbiA9IGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKFxuLy8gICAgICAgLyg/Oig/Ol58Lio7XFxzKilYU1JGLVRPS0VOXFxzKj1cXHMqKFteO10qKS4qJCl8Xi4qJC8sXG4vLyAgICAgICBcIiQxXCJcbi8vICAgICApO1xuLy8gICAgIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uW1wiWC1YU1JGLVRPS0VOXCJdID0gY3NyZlRva2VuO1xuLy8gICAgIHJldHVybiBjc3JmVG9rZW47XG4vLyAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgY29uc29sZS5lcnJvcihcIkNTUkbjg4jjg7zjgq/jg7Pjga7lj5blvpfjgavlpLHmlZfjgZfjgb7jgZfjgZ86XCIsIGVycm9yKTtcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDU1JG44OI44O844Kv44Oz44Gu5Y+W5b6X44Gr5aSx5pWX44GX44G+44GX44GfXCIpO1xuLy8gICB9XG4vLyB9O1xuXG4vLyAvLyDjg6rjgq/jgqjjgrnjg4jjga7pgIHkv6Fcbi8vIGV4cG9ydCBjb25zdCBzZW5kUmVxdWVzdCA9IGFzeW5jIChtZXRob2QsIHVybCwgZGF0YSkgPT4ge1xuLy8gICB0cnkge1xuLy8gICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucmVxdWVzdCh7XG4vLyAgICAgICBtZXRob2QsXG4vLyAgICAgICB1cmwsXG4vLyAgICAgICBkYXRhLFxuLy8gICAgIH0pO1xuLy8gICAgIGNvbnNvbGUubG9nKGAke21ldGhvZH0gcmVxdWVzdCB0byAke3VybH0gc3VjY2Vzc2Z1bDpgKTtcbi8vICAgICBjb25zb2xlLmxvZyhcIlJFU1BPTlNFXCIsIHJlc3BvbnNlKTtcbi8vICAgICByZXR1cm4gcmVzcG9uc2U7XG4vLyAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBzZW5kIHJlcXVlc3Q6XCIsIGVycm9yKTtcbi8vICAgICByZXR1cm4gZXJyb3IucmVzcG9uc2U7XG4vLyAgIH1cbi8vIH07XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJhcGlDbGllbnQiLCJjcmVhdGUiLCJiYXNlVVJMIiwid2l0aENyZWRlbnRpYWxzIiwiZ2V0Q3NyZlRva2VuIiwiZ2V0IiwiY3NyZlRva2VuIiwiZG9jdW1lbnQiLCJjb29raWUiLCJyZXBsYWNlIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiRXJyb3IiLCJzZW5kUmVxdWVzdCIsIm1ldGhvZCIsInVybCIsImRhdGEiLCJyZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./services/requestApi.ts\n"));

/***/ })

});