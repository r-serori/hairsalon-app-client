"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/requestApi.ts":
/*!********************************!*\
  !*** ./services/requestApi.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCsrfToken: function() { return /* binding */ getCsrfToken; },\n/* harmony export */   sendRequest: function() { return /* binding */ sendRequest; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"../node_modules/axios/index.js\");\n\nconst BASE_URL = \"http://localhost:8000\";\n// const BASE_URL = \"http://localhost:8888\";\naxios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].defaults.baseURL = BASE_URL;\naxios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].defaults.withCredentials = true; // Cookieを使用するための設定を有効にする\n// // CSRFトークンの取得\nconst getCsrfToken = async ()=>{\n    try {\n        await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/sanctum/csrf-cookie\");\n        // CSRFトークンを取得\n        const csrfToken = document.cookie.replace(/(?:(?:^|.*;\\s*)XSRF-TOKEN\\s*=\\s*([^;]*).*$)|^.*$/, \"$1\");\n        axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].defaults.headers.common[\"X-XSRF-TOKEN\"] = csrfToken;\n        console.log(\"CSRFトークン取得成功:\", csrfToken);\n        return csrfToken;\n    } catch (error) {\n        console.error(\"CSRFトークンの取得に失敗しました:\", error);\n        throw new Error(\"CSRFトークンの取得に失敗しました\");\n    }\n};\nconst sendRequest = async (method, url, data)=>{\n    console.log(\"送信するデータ:\", data);\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].request({\n            method,\n            url,\n            data,\n            withXSRFToken: true,\n            xsrfHeaderName: \"X-XSRF-TOKEN\",\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8; \"\n            }\n        });\n        console.log(\"\".concat(method, \" request to \").concat(url, \" successful:\"));\n        console.log(\"RESPONSE\", response);\n        console.log(\"response.data\", JSON.parse(response.data));\n        return response;\n    } catch (error) {\n        console.error(\"Failed to send request:\", error);\n        return error.response;\n    }\n// ここでCSRFトークンの再取得を試みる\n//   if (error.response?.status === 419) {\n//     console.error(\"CSRFトークンのエラーが発生しました。再取得を試みます。\");\n//     try {\n//       await axios.get(\"api/sanctum/csrf-cookie\"); // CSRFトークンを再取得\n//       const retryResponse = await axios.request({\n//         method,\n//         url,\n//         data,\n//       });\n//       console.log(`${method} request to ${url} successful on retry:`);\n//       console.log(\"RESPONSE\", retryResponse);\n//       return retryResponse;\n//     } catch (retryError) {\n//       console.error(\"Failed to send request on retry:\", retryError);\n//       return retryError.response;\n//     }\n//   } else {\n//     console.error(\"Failed to send request:\", error);\n//     return error.response;\n//   }\n// }\n}; // import axios from \"axios\";\n // const BASE_URL = \"http://localhost:8000\";\n // axios.defaults.baseURL = BASE_URL;\n // axios.defaults.withCredentials = true;\n // // CSRFトークンの取得\n // export const getCsrfToken = async () => {\n //   try {\n //     await axios.get(\"/sanctum/csrf-cookie\");\n //     // CSRFトークンを取得\n //     const csrfToken = document.cookie.replace(\n //       /(?:(?:^|.*;\\s*)XSRF-TOKEN\\s*=\\s*([^;]*).*$)|^.*$/,\n //       \"$1\"\n //     );\n //     axios.defaults.headers.common[\"X-XSRF-TOKEN\"] = csrfToken;\n //     return csrfToken;\n //   } catch (error) {\n //     console.error(\"CSRFトークンの取得に失敗しました:\", error);\n //     throw new Error(\"CSRFトークンの取得に失敗しました\");\n //   }\n // };\n // // リクエストの送信\n // export const sendRequest = async (method, url, data) => {\n //   try {\n //     const response = await axios.request({\n //       method,\n //       url,\n //       data,\n //     });\n //     console.log(`${method} request to ${url} successful:`);\n //     console.log(\"RESPONSE\", response);\n //     return response;\n //   } catch (error) {\n //     console.error(\"Failed to send request:\", error);\n //     return error.response;\n //   }\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./services/requestApi.ts\n"));

/***/ })

});